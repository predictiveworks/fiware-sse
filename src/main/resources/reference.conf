actor {
  #
  # Timeout in seconds
  #
  timeout = 5
  #
  # Parameters to control the handling of failed child actors:
  # it is the number of retries within a certain time window.
  # 
  # The superviser strategy restarts a child up to 10 restarts 
  # per minute. The child actor is stopped if the restart count 
  # exceeds maxRetries during the withinTimeRange duration.    
  #
  maxRetries = 10
  #
  # Time range in minutes
  #
  timeRange = 1
  #
  # Child actors are defined leveraging a RoundRobin pool with a 
  # dynamic resizer. The boundaries of the resizer are defined
  # below
  #
  lower = 2
  upper = 100
  #
  # The number of instances for the RoundRobin pool
  #
  instances = 50
 
}

binding {
  #
  # The HTTP binding for the HTTP server
  #
  host = "127.0.0.1"
  port = 9060
}

broker {
  #
  # The endpoint of the Orion Context Broker
  #
  endpoint = "http://localhost"
}
#
# The configuration of the Carto DB (PostgreSQL)
# connector 
#
cartodb {
  #
  # The host parameter to access the Carto REST
  # SQL interface
  #
  host = "127.0.0.1"
  #
  # The port parameter to access the Carto REST
  # SQL interface
  #
  port = 8080
  #
  # The API key
  #
  apiKey = ""
  #
  # The duration in seconds to wait until the
  # Carto REST service responds
  #
  duration = 5
}
subscription {

  #
  # The description to specify this subscription
  #
  description = ""
  subject = {
    entities = [
      {id = "", type = ""},
    ]
    #
    # The condition element defines the "trigger" for the subscription. The "attrs" field
    # contains a list of attribute names. These names define the "triggering attributes",
    # i.e. attributes that upon creation/change due to entity creation or update trigger
    # the notification.
    #
    # The rule is that if at least one of the attributes in the list changes (e.g. some
    # kind of "OR" condition), then a notification is sent. An empty attribute vector
    # specifies that a notification is triggered any entity attribute change (regardless
    # of the name of the attribute).
    #
    condition = {
      attrs = ["temperature",]
    }
  }
  notification = {
    http = {
      #
      # The url where to send notifications. Only one url can be included
      # per subscription. However, you can have several subscriptions on
      # the same context elements (i.e. same entity and attribute).
      #
      url = "http://localhost:9060/notifications"
    }
    #
    #
    # The "attrs" field defines a list of attribute names that will be included
    # in the notification. An empty attribute vector indicates that all attributes
    # of the specified entities will be published.
    #
    attrs = ["temperature",]
  }
  #
  # Subscriptions may have an expiration date (expires field), specified using
  # the ISO 8601 standard format. Once a subscription overpass that date, the
  # subscription is simply ignored.
  #
  # You can also have permanent subscriptions. Just omit the expires field.
  #
  expires = "2040-01-01T14:00:00.00Z"
  #
  # The throttling element is used to specify a minimum inter-notification arrival time.
  # So, setting throttling to 5 seconds as in the example below, makes a notification not
  # to be sent if a previous notification was sent less than 5 seconds earlier, no matter
  # how many actual changes take place in that period.
  #
  # This is to give the notification receptor a means to protect itself against context
  # producers that update attribute values too frequently.
  #
  throttling: 5
}

#
# The security configuration for SSL/TLS. Support is a key and
# trust store based approach as well as the usage of certificates
#
security {
  #
  # SSL/TLS support to send request to the Carto DB
  # REST SQL API
  #
  cartodb {
    #
    # Indicator to specify whether SSL must be used
    # for client authentication. If TLS certificates
    # are used, the certificate files must be included
    # into the connection
    #
    ssl = false
  }
  #
  # SSL/TLS support for send subscription requests
  # to the Orion Context Broker
  #
  fiware = {
    #
    # The default configuration for subscription
    # requests does not support SSL/TLS. Set this
    # value to "true" to enable encryption
    #
    ssl = "false"
    #
    # The path to the keystore file
    #
    ksFile = ""
    #
    # The keystore type
    #
    ksType = ""
    #
    # The keystore password
    #
    ksPass = ""
    #
    # The keystore algorithm
    #
    ksAlgo = ""
    #
    # The path to the truststore file
    #
    tsFile = ""
    #
    # The truststore type
    #
    tsType = ""
    #
    # The truststore password
    #
    tsPass = ""
    #
    # The truststore algorithm
    #
    tsAlgo = ""
    #
    # The path to the certificate file of the
    # Certificate authority
    #
    caCertFile = ""
    #
    # The path to the certificate file
    #
    certFile = ""
    #
    # The path to the private key file
    #
    privateKeyFile = ""
    #
    # The password for the private key file
    #
    privateKeyFilePass = ""

  }

  server = {
    #
    # The default configuration for notification
    # requests does not support SSL/TLS. Set this
    # value to "true" to enable encryption
    #
    ssl = "false"
    #
    # The path to the keystore file
    #
    ksFile = ""
    #
    # The keystore type
    #
    ksType = ""
    #
    # The keystore password
    #
    ksPass = ""
    #
    # The keystore algorithm
    #
    ksAlgo = ""
    #
    # The path to the truststore file
    #
    tsFile = ""
    #
    # The truststore type
    #
    tsType = ""
    #
    # The truststore password
    #
    tsPass = ""
    #
    # The truststore algorithm
    #
    tsAlgo = ""
    #
    # The path to the certificate file of the
    # Certificate authority
    #
    caCertFile = ""
    #
    # The path to the certificate file
    #
    certFile = ""
    #
    # The path to the private key file
    #
    privateKeyFile = ""
    #
    # The password for the private key file
    #
    privateKeyFilePass = ""

  }
}
